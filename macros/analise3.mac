#include <fstream>
#include <sstream>
#include <iostream>   
#include <stdlib.h> 

using namespace std;

void analise3()
{

    // Initializing values
    double Current1 = 0;
    double Current2 = 0;

    TFile* f1;
    TTree* a1;
    TH2F* hT1C;
    ofstream lista("RMS.txt");
    ofstream lista2("data.txt");

    for(Current1 = 0; Current1<=50; Current1 += 0.1)
    {
        // Go to where are the root files
        string root = "/home/leo/Desktop/RIBRAS-1S/RIBRAS-1S/ROOT/tree_";

        // Getting all root file names
        ostringstream f;
        f.precision(2);
        f.setf( std::ios::fixed, std::ios::floatfield );
        f << root << Current1 << ".root";

        f1 =  new TFile(f.str().data());                              // Open root file
        f.clear();                                                    // Clear root name

        TVectorD *v = (TVectorD*) f1->Get("Total Hits");              // Opening TVector where data about number of hits are stored, (v*)[0] is number of hits on target and (v*)[1] hits on detector

        a1 = (TTree *)f1->Get("SiTelescope");                         // Getting tree

        hT1C = new TH2F("hit","pos_y",500, -75.,75, 500, -75., 75.);  // Define a 2D histogram

        a1->Draw("pos_y_target:pos_x_target >> hit","", "goff");          // Drawing histogram

        double sigma_x = hT1C->GetRMS(1);                             // Getting sigma x
        double sigma_y = hT1C->GetRMS(2);                             // Getting sigma y
        double HitsOnTarget = (*v)[0];
        double HitsOnDetector = (*v)[1];

        // Listing all data (data.txt)
        lista2 << HitsOnTarget << " " << Current1 << " " << Current2 << " " << (sigma_x + sigma_y)/2 << endl;

        // Listing all data for high number of hits (RMS.txt)
        if(HitsOnTarget >= 100)
        {
            lista << (sigma_x + sigma_y)/2 << " " << Current1 << " " << Current2 << " " << HitsOnDetector << endl;
        }

        // Cleaning everything
        f.clear();
        hT1C->Clear();
        delete f1;
    }
    ////////////////////////////
    // Creating 3-D histogram //
    ////////////////////////////

    // Creating Canvas
    // TCanvas *C1 = new TCanvas();

    // Reading data.txt file
    ifstream data("data.txt");
    Double_t nHits, iC1, iC2, iRMS;

    // Creating a 3-D histogram
    int nBins = 100;
    TH3F *hist = new TH3F("hist", "nHits x Current", nBins, 10, 35, nBins, 10, 50, nBins, 0, 150);
    TH3F *histRMS = new TH3F("histRMS", "RMS med x Current", nBins, 20, 35, nBins, 20, 35, nBins, 0, 150);

    // Filling histogram
    while(data >> nHits >> iC1 >> iC2 >> iRMS)
    {
        hist->Fill(iC1, iC2, nHits);
        histRMS->Fill(iC1, iC2, iRMS);
    }
    // Drawing histogram RMS
    histRMS->GetXaxis()->SetTitle("Current 1");
    histRMS->GetYaxis()->SetTitle("Current 2");
    histRMS->GetZaxis()->SetTitle("RMS Med");

    // Drawing histogram
    hist->GetXaxis()->SetTitle("Current 1");
    hist->GetYaxis()->SetTitle("Current 2");
    hist->GetZaxis()->SetTitle("Number of hits");

    //histRMS->Draw("LEGO");
    //hist->Draw("LEGO");

    //////////////////////////////////
    // Searching for better current //
    //////////////////////////////////

    // Reading RMS.txt file
    ifstream RMS("RMS.txt");
    double RMSmed, Current_1, Current_2, NoOfHits;
    
    // Initializing the biggest number
    // Alpha is going to be smallest RMSmed
    double alpha = DBL_MAX;

    // Initializing the smallest number
    // Beta is going to be highest number of hits on detector
    double beta = DBL_MIN;

    // Initializing currents
    double c1 = 0;
    double C1 = 0;

    // Getting all values from RMS list
    while (RMS >> RMSmed >> Current_1 >> Current_2 >> NoOfHits)
    {
        // Getting absolute value of RMSmed
        double n = abs(RMSmed);

        // Getting biggest NoOfHits
        if(NoOfHits > beta)
        {
            beta = NoOfHits;
            C1 = Current_1;
        }

        // Getting smallest RMSmed
        if(n < alpha)
        {
            alpha = RMSmed;
            c1 = Current_1;
        }
    }

    if(alpha == DBL_MAX)
    {
        cout << "------------------------------------" << endl;
        cout << "Couldn't find any focus" << endl;
        cout << "------------------------------------" << endl;
    }
    else
    {
        cout << "------------------------------------" << endl;
        cout << "Smallest RMSmed: " << alpha << "mm" << endl;
        cout << "Value of current 1: " << c1 << endl;
        cout << "------------------------------------" << endl;
        cout << " " << endl;
        cout << "------------------------------------" << endl;
        cout << "Highest number of hits: " << beta << endl;
        cout << "Value of current 1: " << C1 << endl;
        cout << "------------------------------------" << endl;
    }
}
